name: CI/CD

on:
  push:
    branches: ["main", "master"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/python-crud

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Build and test
        run: |
          docker build -t test-image .
          docker-compose up -d db
          sleep 10
          docker run --rm --network host \
            -e DATABASE_URL="postgresql+psycopg://kubsu:kubsu@localhost:5432/kubsu" \
            test-image python -m pytest -v tests/
          docker-compose down

  deploy:
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: Deploy to server
        run: |
          docker save ${{ env.IMAGE_NAME }}:latest | gzip > app.tar.gz
          
          echo "${{ secrets.DEPLOY_KEY }}" > key.pem
          chmod 600 key.pem
          
          scp -i key.pem -o StrictHostKeyChecking=no \
            app.tar.gz ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
          
          ssh -i key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          gunzip -c /tmp/app.tar.gz | podman load
          podman stop python-crud || true
          podman rm python-crud || true
          podman run -d --name python-crud --network host \
            -e DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}" \
            ${{ env.IMAGE_NAME }}:latest
          
          rm /tmp/app.tar.gz
          EOF
          
          rm key.pem app.tar.gz
