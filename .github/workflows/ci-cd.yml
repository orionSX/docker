name: CI/CD Pipeline

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]

env:
  IMAGE_NAME: kubsu/python-crud
  REGISTRY: docker.io

jobs:
  test:
    name: Run Tests
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: final
          tags: ${{ env.IMAGE_NAME }}:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start test database
        run: |
          docker-compose --profile test up -d db
          
      - name: Wait for database
        run: |
          timeout 60 bash -c 'until docker-compose --profile test exec -T db pg_isready -U kubsu -d kubsu; do sleep 2; done'

      - name: Run tests
        run: |
          docker run --rm --network host \
            -e DATABASE_URL="postgresql+psycopg://kubsu:kubsu@localhost:5432/kubsu" \
            -e PYTHONPATH=/app \
            ${{ env.IMAGE_NAME }}:test \
            python -m pytest -v tests/ --tb=short

      - name: Stop test services
        if: always()
        run: |
          docker-compose --profile test down -v

  build-and-push:
    name: Build and Push to Registry
    needs: test
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/python-crud
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: final
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to server via SSH
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          IMAGE_FULL_NAME: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/python-crud:latest
        run: |
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º Docker –æ–±—Ä–∞–∑ –≤ tar —Ñ–∞–π–ª
          echo "Saving Docker image..."
          docker pull $IMAGE_FULL_NAME
          docker save $IMAGE_FULL_NAME | gzip > app-image.tar.gz
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SSH –∫–ª—é—á
          echo "$DEPLOY_KEY" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key
          
          # –ö–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          echo "Copying image to server..."
          scp -i /tmp/deploy_key -o StrictHostKeyChecking=no \
            app-image.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          echo "Deploying on server..."
          ssh -i /tmp/deploy_key -o StrictHostKeyChecking=no \
            $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          
          # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑ –≤ Podman
          gunzip -c /tmp/app-image.tar.gz | podman load
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          podman stop python-crud || true
          podman rm python-crud || true
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          podman run -d \
            --name python-crud \
            --network host \
            -e DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}" \
            -e ENVIRONMENT=production \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/python-crud:latest
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
          sleep 10
          if podman ps | grep -q python-crud; then
            echo "‚úÖ Deployment successful!"
            podman logs python-crud --tail 20
          else
            echo "‚ùå Deployment failed!"
            podman logs python-crud --tail 50
            exit 1
          fi
          
          # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -f /tmp/app-image.tar.gz
          EOF
          
          # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -f /tmp/deploy_key app-image.tar.gz
          
          echo "üöÄ Deployment completed successfully!"
